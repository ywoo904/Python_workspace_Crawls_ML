#파이썬 3/18(금)
# ===== 주석처리 =====
# "#"은 한 줄 주석 / 파이썬에서 ''와 ""는 차이가 없다! (참고:json은 꼭 "")
# "''' ~ '''" #>> ' 세개와 ' 세개 사이는 다중 문자열 처리되어서 주석과 같은 처리가 됨
'''
이렇게 입력된 값들은 모두 다중 문자열로 처리되어 실행 코드와 상관없는 데이터가 됨~   자바의 /* ~ */ 와 같다.
'''
"""summary""" #이것도 서머리로 사용되면서 실행코드가 아닌 값이 됨 


#  변수 : 필요한 데이터를 일시적으로 보관하거나 처리 결과를 담을 수 있는 기억 장소
# 파이썬에서는 이 변수가 값을 저장하는 것이 아니라, 저장된 값의 메모리 주소를 저장한다는 특징이 있다

# 변수 작명 규칙
# - 의미를 파악할 수 있는 이름으로 지정
# - 첫자는 영문자 또는 "_"으로 시작한다 (숫자로 시작할 수 없음)
# - 공백이나 특수문자 사용 안함
# - 예약어를 사용할 수 없다 (예약어는 이미 사용되고 있는 명령어들)
# - 대문자와 소문자는 서로 다른 변수 인식(대소문자 구분)
# - 두 단어를 조합하여 변수명을 지정할 경우 두 번째 단어의 첫 글자는 대문자로 표기

# 파이썬의 자료형
# 문자형 자료 - str : '' 또는 "" 를 이용하여 표기
# 숫자형 자료 - 정수(int), 실수(float) : 10(int), 10.123(float) // double등의 여러 자료형이 없음!!
# 논리형 자료 - Bool(ean) : True, False

# -- 자료구조 : list, dict, tuple, set

var1 = "Hello Python"
print(var1)
# id() ->  내장함수로 메모리 주소를 알려준다
print(id(var1)) # var1 이 가리키는 데이터의 메모리 주소를 알려줌
print(type(var1)) # type을 <class 'type'>으로 표시함
var2 = 100
print(var2)
print(id(var2))
print(type(var2))
var3 = 100.234
print(var3)
print(id(var3))
print(type(var3))

var4 = True 
print(var4)
print(id(var4))

import keyword # 모듈 임포트
python_keyword = keyword.kwlist
print(python_keyword) 

# 데이터 타입을 알려주는 내장 함수: type() 
# 데이터의 길이 값을 알려주는 내장 함수 : len() 
print(type(python_keyword)) # 데이터 타입
print(len(python_keyword)) # 데이터의 갯수

# 자료형 변환
# : 형변환은 묵시적 형변환, 명시적 형변환 두 가지 형태가 있음
# 묵시적 형변환은 작업하지 않아도 프로그램에서 자동으로 변환하는 형변환
# 명시적 형변환은 형변환에 대한 내용을 명시적으로 처리하는 형변환
test1 = 1 + 1.0 # int 1의 값이 float으로 형변환 -> 묵시적 형변환
test2 = 1 * 1.0
print(type(test1))
print(type(test2))
# test3 = 1 + '1'  # 에러 발생 : 문자는 솟자로 묵시적 형변환은 안됨!

# 명시적 형변환 함수들 : int(), float(), str(), bool(), ...list(), tuple(), dict()...
# int() : 인자에 지정된 값을 int로 변환
print("1. int형변환========")
a = int(0.5)
print(type(a),a)

b = int('100')
print(type(b),b)

#c = int('100.1') # ValueError발생 - 형변환 두 번은 불가
#print(type(c),c)

#int(x,base=int(숫자)) base 인자값은 정수 표현 방식을 결정(base=2진법, 8진법 등의 수를 정수로 변환)
print(int('1010',base=2)) # 2진수 1010 = 10진수 10
print(int('10',base=8))     # 8
print(int('10',base=16))    # 16
print(int('1C',base=16))    # 28

# 2. float() : 문자, 정수 -> 실수
print(float('1001'))        # 1001.0
print(float(1001))          # 1001.0
print(float('1001.100'))    # 1001.1

# 3. bool() : 논리형 형변환 - 특정 값을 제외하고(0) 모두 True
    # 정수
print(bool(1))      # True
print(bool(0))      # False
print(bool(-1))     # True
    # 실수
print(bool(1.0))     # True
print(bool(0.0))     # False
print(bool(0.1))     # True  
    # 문자열
print(bool('a'))     # True
print(bool(''))      # False
    # 비교연산식
print(bool(1>0))    # True
print(bool(1<0))    # False
    # list - 대괄호
print(bool([1,2,3,4,5]))    # True
print(bool([]))             # False
    # tuple - 소괄호
print(bool((1,2,3,4,5)))      # True
print(bool((())))             # False

print(int(True))    # 1
print(int(False))   # 0

# 진수 표현 - 정수 추가변환
# bin(), oct(), hex() 함수의 사용, 각 지정하는 진법으로 정수 값을 변환
print(bin(10))  # 0b1010 => 0b = 2진수
print(oct(10))  # 0o12 ==> 0o = 8진수
print(hex(10))  # 0xa ==> 0x = 16진수
print(int(0b1010))  # 10 (2진수 1010을 10진수로 변환)

## 출력연산자 : print() - 화면에 값들을 출력하는 함수
# print()는 하나의 값만을 출력하지 않고 다수의 값을 출력할 수 있음. 구분자 ","를 사용
print('a',1,1.1,True)   # a 1 1.1 True
# sep 인자값은 여러개의 값을 구분할 때 구분자로 사용할 값을 지정 가능. 기본값은 ' '(여백)
print('a',1,1.1,True,sep='-')   # a-1-1.1-True
# end 인자값은 출력 결과의 끝에 들어갈 값을 지정할 수 있음. 기본값은 "\n"(줄바꿈)
print(1)
print(2)
print(3,end=' ')
print(4,end='+')    # => 3 4+로 출력됨(줄바꿈 기본값은 적용 안됨)

#==========예제 1=============
print("\t\t\t","#"*4, "회비 정보","#"*4)
print("="*50)
print("이름\t나이\t전화번호\t\t회비")
print("="*50)
print("김동완\t38\t010-1111-1111\t\t₩20,000")
print("서지수\t24\t010-1234-5678\t\t₩30,000")
print("이지은\t25\t010-2525-2345\t\t₩50,000")
print("-"*50)
print("총합계\t\t\t\t\t₩100,000")
print("="*50)

print("\t\t","#"*4, "회비 정보","#"*4,"\n",
      "="*50,"\n",
      "이름\t나이\t전화번호\t\t회비","\n",
      "="*50,"\n",
      "김동완\t38\t010-1111-1111\t\t₩20,000","\n",
      "서지수\t24\t010-1234-5678\t\t₩30,000","\n",
      "이지은\t25\t010-2525-2345\t\t₩50,000","\n",
      "-"*50,"\n",
      "총합계\t\t\t\t\t₩100,000","\n",
      "="*50
      )

## 서식문자
#
#   C스타일         파이썬3         설명
#     %s             {}         문자열 출력
#     %d             {}         정수 출력
#                    {:b}       표현식(0b) 없는 2진수 값 출력
#     %o             {:o}       표현식(0o) 없는 8진수 값 출력
#     %x             {:x}       표현식(0x) 없는 16진수 값 출력
#     %f             {:f}       실수 출력
#     %.2f           {:.2f}     소수점 2자리까지의 실수 출력
#     %6d            {:6}       6자리 고정 출력

# 문자열 정수 출력
print("%s님의 나이는 %d입니다." % ('김동완',38))
print("{}님의 나이는 {}입니다.".format('김동완',38))

# 문자열 실수 출력
print("%s님의 무게는 %f입니다." % ('김동완',75.5))
print("{}님의 무게는 {:f}입니다.".format('김동완',75.5))

# 고정길이 출력
print("원주율 = %8.3f" % (3.14159))     #   3.142(소수점도 8자릿수에 포함)
print("원주율 = {:8.3f}".format(3.14159))

# 정렬하여 출력
print("%10s, %-10s" % ('오른쪽','왼쪽')) # C언어방식
print("{:>10}".format('오른쪽')) #파이썬방식
print("{:<10}".format('왼쪽'))
print("{:^10}".format('가운데'))

# 빈 여백을 채워서 출력
print("%5d %05d"%(1,1))
print("{:5} {:05}".format(1,1))

# 문자열의 경우에는 정렬 후 여백에 사용할 문자를 ":" 다음에 입력
print("{:_>10}".format('test'))     # >로 정렬처리 + 여백 _로 채우기
print("{:_<10}".format('test'))
print("{:_^10}".format('test'))
print("{:=^10}".format('test'))

# 천 단위 구분 출력
print("{:,}".format(1000000000))

#=========예제2==========
print(
    "-"*56,"\n"
    "\t\t\t파이썬 쇼핑몰\t\t\t\n",
    "번호 : 1078718855\n",
    "주소 : 서울시 종로구 종로3가\n",
    "성명 : 김사장\n",
    "전화 : 070-1234-5678\n",
    "-"*56,"\n",
    "\t품명\t\t단가\t\t수량\t금액\t\n",
    "-"*56,"\n",
    "  블루투스 이어폰\t85,000\t\t1\t","{:>6}".format('85,000'),"\n",
    "  USB3.0 8G\t\t8,000\t\t1\t","{:>6}".format('8,000'),"\n",
    "-"*56,"\n",
    "{:<26}".format('소계'),"{:>26}".format('93,000'),"\n",
    "-"*56,"\n",
    "{:<26}".format('청구금액'),"{:>24}".format('93,000'),"\n",
    "{:<26}".format('받은금액'),"{:>24}".format('100,000'),"\n",
    "{:<26}".format('거스름돈'),"{:>24}".format('7,000'),"\n",
    "-"*56
    )